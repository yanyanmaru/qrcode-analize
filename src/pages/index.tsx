import Head from "next/head";
import styles from "./../styles/Home.module.css";
import Header from "./../components/Header";
import Input from "./../components/Input";

import { useState,useEffect,useRef } from "react";

import Generate from "@/components/Generate.js";
import Copy from "@/components/Copy";

type Analize = {
  id: number,
  text1: string,
  text2: string,
  text3: string
}

export default function Home() {
  const [analize, setAnalize] = useState<Analize[]>([]);
  useEffect(() => {
    const storedTodos = JSON.parse(localStorage.getItem('analize') || '[]') as Analize[];
    if (storedTodos) {
      setAnalize(storedTodos);
    }
  }, []);

  // ToDoリストの変更時にLocalStorageに保存
  useEffect(() => {
    localStorage.setItem('analize', JSON.stringify(analize));
  }, [analize]);

  

  const [text1, setText1] = useState("");

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setText1(() => e.target.value);
  };

  const [text2, setText2] = useState("");

  const handleChange2 = (e: React.ChangeEvent<HTMLInputElement>) => {
    setText2(() => e.target.value);
  };

  const [text3, setText3] = useState("");

  const handleChange3 = (e: React.ChangeEvent<HTMLInputElement>) => {
    setText3(() => e.target.value);
  };

  const [active, setActive] = useState(false);
  const [active1, setActive1] = useState(false);
  const [active2, setActive2] = useState(false);

  const [generateOn, setGenerateOn] = useState(false);

  function UrlChecker(string:string) {
    try {
      new URL(string);
      return true;
    } catch (err) {
      return false;
    }
  }

  const generateBtn = (e: React.ChangeEvent<HTMLInputElement>) => {
    if(text1 == "" || text2 == "" || text3 == ""){
      alert("①②③全て入力してください");
      return;
    }
    if(!UrlChecker(text1)){
      alert("①がURLの形になっていません。");
      return;
    }
    setGenerateOn(true);
    const newAnalize = {
      id: Date.now(), // 現在時刻をIDとして使用
      text1: text1,
      text2: text2,
      text3: text3
    };
    setAnalize([...analize, newAnalize]);
  };


const downloadFile = async (url: string): Promise<void> => {
  try {
    const response = await fetch(url)
    const blob = await response.blob()
    const downloadTag = document.createElement('a')
    downloadTag.href = URL.createObjectURL(blob)
    downloadTag.download = `sample.png`
    downloadTag.click()
  } catch (error:any) {
    console.error(error.message)
  }
}

  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={styles.progressbar}></div>
        <Header />
          <div className={styles.second}>
            <Input
              title="①飛んでほしいURLを入力する"
              text={text1}
              handleChange={handleChange}
              onFocusEvent={() => {
                setActive(true);
              }}
              onBlurEvent={() => {
                setActive(false);
              }}
            />
            <Input
              title="②参照元(utm_source)を入力する"
              text={text2}
              handleChange={handleChange2}
              onFocusEvent={() => {
                setActive1(true);
              }}
              onBlurEvent={() => {
                setActive1(false);
              }}
            />
            <Input
              title="③メディア(utm_medium)を入力する"
              text={text3}
              handleChange={handleChange3}
              onFocusEvent={() => {
                setActive2(true);
              }}
              onBlurEvent={() => {
                setActive2(false);
              }}
            />
            <Generate
              generateText={text1+'&utm_source='+text2+'&utm_medium='+text3}
              canClick={text1 != "" && text2 != "" && text3 != "" && UrlChecker(text1)}
              generateBtn={generateBtn}
            />
            
            {text1 != "" && text2 != "" && text3 != "" && generateOn && (
              <div className={styles.result}>
                <img id="qrimage" alt="" src={'https://chart.apis.google.com/chart?chs=300x300&cht=qr&chl='+text1+'&utm_source='+text2+'&utm_medium='+text3}></img>
                <button className={styles.btn} onClick={()=>{downloadFile('https://chart.apis.google.com/chart?chs=300x300&cht=qr&chl='+text1+'&utm_source='+text2+'&utm_medium='+text3)}}>ダウンロードする</button>
              </div>
            )}
            <div>
            </div>
          </div>
      </main>
    </>
  );
}
